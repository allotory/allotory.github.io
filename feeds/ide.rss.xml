<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Amazilia</title><link href="http://allotory.github.io/" rel="alternate"></link><link href="http://allotory.github.io/feeds/ide.rss.xml" rel="self"></link><id>http://allotory.github.io/</id><updated>2016-02-25T00:00:00+08:00</updated><entry><title>使用Vundle和GitHub管理Vim配置</title><link href="http://allotory.github.io/posts/2016/02/25/vimrc_config/" rel="alternate"></link><updated>2016-02-25T00:00:00+08:00</updated><author><name>Ellery</name></author><id>tag:allotory.github.io,2016-02-25:posts/2016/02/25/vimrc_config/</id><summary type="html">&lt;h3&gt;简介&lt;/h3&gt;
&lt;p&gt;Vim 作为史上最强大的编辑器之一，拥有数以万计的插件。Vim 的生态系统拥有完美的插件机制。Vundle 是现存最好的 Vim 插件管理方案，用 Vundle 管理插件的好处：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自动下载安装&lt;/li&gt;
&lt;li&gt;自动更新&lt;/li&gt;
&lt;li&gt;轻松异地重装&lt;/li&gt;
&lt;li&gt;自动清理没用的插件&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;前提&lt;/h3&gt;
&lt;p&gt;使用 &lt;a href="https://github.com/VundleVim/Vundle.vim"&gt;Vundle&lt;/a&gt; 管理 Vim 插件时，绝大多数插件都是使用的 Github 上的开源库直接安装的，并且配置好的 Vundle 插件也需要使用 Github 进行管理。所以如果在 Windows 上首先需要安装 Git 客户端并了解常用 Git 命令。&lt;/p&gt;
&lt;h3&gt;安装&lt;/h3&gt;
&lt;p&gt;Vim 可以轻松安装在 &lt;code&gt;Windows&lt;/code&gt; 及 &lt;code&gt;*nix&lt;/code&gt; 系统中，但两者的安装目录结构略有不同。所以安装插件时命令格式也略有不同，应该值得注意。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="x"&gt;Windows 系统：&lt;/span&gt;

&lt;span class="x"&gt;    _vimrc  &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="x"&gt;配置文件   &lt;/span&gt;
&lt;span class="x"&gt;    vmfiles &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="x"&gt;插件目录   对应变量   &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;VIM&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;

&lt;span class="x"&gt;Unix-like 系统：&lt;/span&gt;

&lt;span class="x"&gt;    .vimrc  &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="x"&gt;配置文件&lt;/span&gt;
&lt;span class="x"&gt;    .vim    &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="x"&gt;插件目录&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;在 Github 上创建 Vim 管理仓库&lt;/h4&gt;
&lt;p&gt;在 Github 上创建一个空白仓库作为 Vim 管理仓库，这样在我们更换系统环境时可以轻松重新恢复已有配置。例如我的仓库为 &lt;a href="https://github.com/allotory/doricha"&gt;doicha&lt;/a&gt;。该仓库的传输协议地址为：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git@github.com:allotory/doricha.git
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Vundle 安装（Windows 版本为例）&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;备份 Vim 主目录中的 &lt;code&gt;_vimrc&lt;/code&gt; 文件以及 &lt;code&gt;vimfiles&lt;/code&gt; 目录（这点非常重要！）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用 &lt;code&gt;git clone&lt;/code&gt; 命令克隆先前创建的 Vim 管理仓库，该例子中为了与 Vim 原始目录名称一致方便管理，所以直接克隆到 &lt;code&gt;vimfiles&lt;/code&gt; 目录，其实可以直接克隆到任何地方，只要在配置文件中表明相关路径即可。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git clone git@github.com:allotory/doricha.git vimfiles
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;切换到 &lt;code&gt;vimfiles&lt;/code&gt; 目录下使用 &lt;code&gt;git submodule add&lt;/code&gt; 命令以 &lt;a href="https://git-scm.com/book/en/v2/Git-Tools-Submodules"&gt;子模块&lt;/a&gt;的形式安装 Vundle。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git submodule add https://github.com/VundleVim/Vundle.vim.git bundle/vundle
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;本例中新建了两个新的配置文件 &lt;code&gt;vundle_vimrc&lt;/code&gt; 和 &lt;code&gt;basic_vimrc&lt;/code&gt; ，分别用来保存自定义的 Vundle 配置和自定义的 Vim 基础的配置。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;配置 &lt;code&gt;vundle_vimrc&lt;/code&gt; 文件具体内容请参考 Vundle 配置文档，其中应重点注意 &lt;code&gt;path&lt;/code&gt; 路径问题。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="x"&gt;set nocompatible        &amp;quot; be iMproved, required&lt;/span&gt;
&lt;span class="x"&gt;filetype off            &amp;quot; required&lt;/span&gt;

&lt;span class="x"&gt;&amp;quot; 设置包括vundle和初始化相关的runtime path&lt;/span&gt;
&lt;span class="x"&gt;&amp;quot; 判断操作系统类型&lt;/span&gt;
&lt;span class="x"&gt;if(has(&amp;#39;win32&amp;#39;) || has(&amp;#39;win64&amp;#39;))&lt;/span&gt;
&lt;span class="x"&gt;    set rtp+=&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;VIM&lt;/span&gt;&lt;span class="x"&gt;/vimfiles/bundle/Vundle.vim&lt;/span&gt;
&lt;span class="x"&gt;    let path=&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;VIM&lt;/span&gt;&lt;span class="x"&gt;/vimfiles/bundle&amp;#39;&lt;/span&gt;
&lt;span class="x"&gt;else&lt;/span&gt;
&lt;span class="x"&gt;    set rtp+=~/.vim/bundle/Vundle.vim&lt;/span&gt;
&lt;span class="x"&gt;    let path=&amp;#39;~/.vim/bundle&amp;#39;&lt;/span&gt;
&lt;span class="x"&gt;endif&lt;/span&gt;
&lt;span class="x"&gt;call vundle&lt;/span&gt;&lt;span class="cp"&gt;#&lt;/span&gt;&lt;span class="nf"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;&amp;quot; 另一种选择, 指定一个vundle安装插件的路径&lt;/span&gt;
&lt;span class="x"&gt;&amp;quot;call vundle&lt;/span&gt;&lt;span class="cp"&gt;#&lt;/span&gt;&lt;span class="nf"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;~/some/path/here&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;

&lt;span class="x"&gt;&amp;quot; 让vundle管理插件版本,必须&lt;/span&gt;
&lt;span class="x"&gt;Plugin &amp;#39;VundleVim/Vundle.vim&amp;#39;&lt;/span&gt;

&lt;span class="x"&gt;&amp;quot; 以下范例用来支持不同格式的插件安装.&lt;/span&gt;
&lt;span class="x"&gt;&amp;quot; 请将安装插的命令放在vundle&lt;/span&gt;&lt;span class="cp"&gt;#&lt;/span&gt;&lt;span class="nf"&gt;begin&lt;/span&gt;&lt;span class="x"&gt;和vundle&lt;/span&gt;&lt;span class="cp"&gt;#&lt;/span&gt;&lt;span class="nf"&gt;end&lt;/span&gt;&lt;span class="x"&gt;之间.&lt;/span&gt;

&lt;span class="x"&gt;&amp;quot; Github上的插件&lt;/span&gt;
&lt;span class="x"&gt;&amp;quot; 格式为 Plugin &amp;#39;用户名/插件仓库名&amp;#39;&lt;/span&gt;
&lt;span class="x"&gt;&amp;quot;Plugin &amp;#39;tpope/vim-fugitive&amp;#39;&lt;/span&gt;

&lt;span class="x"&gt;&amp;quot; 来自 http://vim-scripts.org/vim/scripts.html 的插件&lt;/span&gt;
&lt;span class="x"&gt;&amp;quot; Plugin &amp;#39;插件名称&amp;#39; 实际上是 Plugin &amp;#39;vim-scripts/插件仓库名&amp;#39; 只是此处的用户名可以省略&lt;/span&gt;
&lt;span class="x"&gt;&amp;quot;Plugin &amp;#39;L9&amp;#39;&lt;/span&gt;

&lt;span class="x"&gt;&amp;quot; 由Git支持但不再github上的插件仓库 Plugin &amp;#39;git clone 后面的地址&amp;#39;&lt;/span&gt;
&lt;span class="x"&gt;&amp;quot;Plugin &amp;#39;git://git.wincent.com/command-t.git&amp;#39;&lt;/span&gt;

&lt;span class="x"&gt;&amp;quot; 本地的Git仓库(例如自己的插件) Plugin &amp;#39;file:///+本地插件仓库绝对路径&amp;#39;&lt;/span&gt;
&lt;span class="x"&gt;&amp;quot;Plugin &amp;#39;file:///home/gmarik/path/to/plugin&amp;#39;&lt;/span&gt;

&lt;span class="x"&gt;&amp;quot; 插件在仓库的子目录中.&lt;/span&gt;
&lt;span class="x"&gt;&amp;quot; 正确指定路径用以设置runtimepath. 以下范例插件在sparkup/vim目录下&lt;/span&gt;
&lt;span class="x"&gt;&amp;quot;Plugin &amp;#39;rstacruz/sparkup&amp;#39;, &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="x"&gt;&amp;#39;rtp&amp;#39;: &amp;#39;vim/&amp;#39;}&lt;/span&gt;

&lt;span class="x"&gt;&amp;quot; 避免插件名冲突,例如L9已存在,则可以指定&lt;/span&gt;
&lt;span class="x"&gt;&amp;quot;Plugin &amp;#39;user/L9&amp;#39;, &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="x"&gt;&amp;#39;name&amp;#39;: &amp;#39;newL9&amp;#39;}&lt;/span&gt;

&lt;span class="x"&gt;&amp;quot; 你的所有插件需要在下面这行之前&lt;/span&gt;
&lt;span class="x"&gt;call vundle&lt;/span&gt;&lt;span class="cp"&gt;#&lt;/span&gt;&lt;span class="nf"&gt;end&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="x"&gt;            &amp;quot; 必须&lt;/span&gt;
&lt;span class="x"&gt;filetype plugin indent on    &amp;quot; 必须 加载vim自带和插件相应的语法和文件类型相关脚本&lt;/span&gt;
&lt;span class="x"&gt;&amp;quot; 忽视插件改变缩进,可以使用以下替代:&lt;/span&gt;
&lt;span class="x"&gt;&amp;quot;filetype plugin on&lt;/span&gt;
&lt;span class="x"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="x"&gt;&amp;quot; 简要帮助文档&lt;/span&gt;
&lt;span class="x"&gt;&amp;quot; :PluginList       - 列出所有已配置的插件&lt;/span&gt;
&lt;span class="x"&gt;&amp;quot; :PluginInstall    - 安装插件,追加 `!` 用以更新或使用 :PluginUpdate&lt;/span&gt;
&lt;span class="x"&gt;&amp;quot; :PluginSearch foo - 搜索 foo ; 追加 `!` 清除本地缓存&lt;/span&gt;
&lt;span class="x"&gt;&amp;quot; :PluginClean      - 清除未使用插件,需要确认; 追加 `!` 自动批准移除未使用插件&lt;/span&gt;
&lt;span class="x"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="x"&gt;&amp;quot; 查阅 :h vundle 获取更多细节和wiki以及FAQ&lt;/span&gt;
&lt;span class="x"&gt;&amp;quot; 将你自己对非插件片段放在这行之后&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;配置 &lt;code&gt;baisc_vimrc&lt;/code&gt; 文件，这里提供了我自己常用的一些配置仅供参考。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;set nocompatible

&amp;quot; 主题
colorscheme molokai
let g:molokai_original = 1

&amp;quot; 基础设置
set guifont=Monaco:h14          &amp;quot; 字体 &amp;amp;&amp;amp; 字号
syntax on                       &amp;quot; 打开语法高亮
set number                      &amp;quot; 显示行号
set autoindent                  &amp;quot; 设置缩进有三个取值 cindent (c风格)
                                &amp;quot; smartindent (智能模式)、
                                &amp;quot; autoindent (简单的与上一行保持一致)
set tabstop=4                   &amp;quot; 设置 tab 键的宽度
set shiftwidth=4                &amp;quot; 换行时行间交错使用4个空格
set backspace=indent,eol,start  &amp;quot; 设置退格键可用
                                &amp;quot; indent：如果用了 set indent, set ai 等自动缩进，想用退格键将字段缩进的删掉，必须设置这个选项，否则不响应。
                                &amp;quot; eol：如果插入模式下在行开头，想通过退格键合并两行，需要设置eol。
                                &amp;quot; start：要想删除此次插入前的输入，需设置这个。
set smarttab                    &amp;quot; 每次按 backspace 时删除4个空格
set incsearch                   &amp;quot; 增量式搜索(遍搜索遍显示内容)
set hlsearch                    &amp;quot; 高亮搜索
filetype on                     &amp;quot; 打开文件类型检测功能
filetype plugin on              &amp;quot; 允许加载文件类型插件
filetype indent on              &amp;quot; 允许为不同类型的文件定义不同的缩进格式
set showmatch                   &amp;quot; 显示括号配对情况
&amp;quot;set foldenable                 &amp;quot; 开启代码折叠
&amp;quot;set foldmethod=syntax          &amp;quot; 自动语法折叠
set nobackup                    &amp;quot; 禁止生成备份
set noswapfile                  &amp;quot; 不产生 swp 文件
set mouse=a                     &amp;quot; 启用鼠标
set nowrap                      &amp;quot; 设置不自动折行
set cursorline                  &amp;quot; 突出显示当前行
set clipboard=unnamed           &amp;quot; 与 windows 共享剪贴板
set cmdheight=1                 &amp;quot; 命令行（在状态行下）的高度，默认为1
set laststatus=2                &amp;quot; 开启状态栏信息

&amp;quot; 设置窗口
if has(&amp;quot;gui_running&amp;quot;)
    &amp;quot; au GUIEnter * simalt ~x   &amp;quot; 窗口启动时自动最大化
    winpos 70 25                &amp;quot; 指定窗口出现的位置，坐标原点在屏幕左上角
    set lines=55 columns=180    &amp;quot; 指定窗口大小，lines 为高度，columns 为宽度
    set guioptions+=c           &amp;quot; 使用字符提示框
    set guioptions-=m           &amp;quot; 隐藏菜单栏
    set guioptions-=T           &amp;quot; 隐藏工具栏
    set guioptions=L            &amp;quot; 隐藏左侧滚动条
    set guioptions=r            &amp;quot; 隐藏右侧滚动条
    set guioptions-=b           &amp;quot; 隐藏底部滚动条
    set showtabline=0           &amp;quot; 隐藏 Tab 栏
endif

&amp;quot; 设置编码
set fenc=utf-8                              &amp;quot; 设置编码
set encoding=utf-8                          &amp;quot; 内部的程序识别编码
set fileencoding=utf-8                      &amp;quot; 当前文件编辑时使用的文件编码
set fileencodings=utf-8,gbk,cp936,latin-1   &amp;quot; gvim 打开文件是支持的编码
language messages zh_CN.utf-8               &amp;quot; 解决 consle 输出乱码
set ambiwidth=double                        &amp;quot; 防止特殊符号无法显示
set helplang=cn                             &amp;quot; 中文帮助
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;最后将我们自定义的配置文件引入到 Vim 的配置文件 &lt;code&gt;_vimrc&lt;/code&gt; 中， 同样注意其中路径写法。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="x"&gt;&amp;quot; 引用自定义的vundle配置文件,存放vimrc的地方(不是固定写法，可自定义)&lt;/span&gt;
&lt;span class="x"&gt;&amp;quot; 判断操作系统类型&lt;/span&gt;
&lt;span class="x"&gt;if(has(&amp;#39;win32&amp;#39;) || has(&amp;#39;win64&amp;#39;))&lt;/span&gt;
&lt;span class="x"&gt;    source &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;VIM&lt;/span&gt;&lt;span class="x"&gt;/vimfiles/vundle_vimrc&lt;/span&gt;
&lt;span class="x"&gt;    source &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;VIM&lt;/span&gt;&lt;span class="x"&gt;/vimfiles/basic_vimrc&lt;/span&gt;
&lt;span class="x"&gt;else&lt;/span&gt;
&lt;span class="x"&gt;    source ~/.vim/vundle_vimrc&lt;/span&gt;
&lt;span class="x"&gt;    source ~/.vim/basic_vimrc&lt;/span&gt;
&lt;span class="x"&gt;endif&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;至此，我们已经完成 Vundle 安装。&lt;/p&gt;
&lt;h4&gt;插件安装&lt;/h4&gt;
&lt;p&gt;Vundle 安装完成后，就可以使用其进行其他插件的安装。这里我们以 &lt;a href="https://github.com/scrooloose/nerdtree"&gt;NERDTree&lt;/a&gt; 为例，&lt;code&gt;NERDTree&lt;/code&gt; 是一个非常好用的 Vim 树形浏览插件。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;在 &lt;code&gt;vundle_vimrc&lt;/code&gt; 中 &lt;code&gt;Github&lt;/code&gt; 插件部分添加如下内容：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Plugin &amp;#39;scrooloose/nerdtree&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;重新打开 Vim 命令模式下执行如下命令即可完成安装：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;：PluginInstall
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在 &lt;code&gt;basic_vimrc&lt;/code&gt; 中按需要自行配置 &lt;code&gt;NERDTree&lt;/code&gt;， 如：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;autocmd vimenter * NERDTree
let NERDTreeWinSize=25
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;将已安装的插件以子模块形式进行管理&lt;/h4&gt;
&lt;p&gt;最初我们安装 Vundle 时是以 &lt;code&gt;Git&lt;/code&gt; 子模块形式进行管理的，但是使用 Vundle 安装的插件并没有以子模块形式进行管理，所以为了方便日后更新管理插件，需要手动将其添加为子模块。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git submodule add https://github.com/scrooloose/nerdtree.git bundle/nerdtree
Adding existing repo at &lt;span class="s1"&gt;&amp;#39;bundle/nerdtree&amp;#39;&lt;/span&gt; to the index
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;此时我们已经完成了所有的安装配置操作，可以正常的提交到 &lt;code&gt;Github&lt;/code&gt;。&lt;/p&gt;
&lt;h3&gt;重新安装（Windows 版本为例）&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;克隆主项目到 &lt;code&gt;vimfiles&lt;/code&gt; 目录。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git clone git@github.com:allotory/doricha.git vimfiles
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;此时，所有的插件目录均为空，需要重新安装，这是可以使用三种方法安装：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;使用 Vundle 命令安装，这种方法需要重新安装 Vundle。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git submodule add https://github.com/VundleVim/Vundle.vim.git bundle/vundle
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然后再使用 Vundle 命令重新安装其他插件。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;：PluginInstall
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;由于之前所有插件均添加为主项目的子模块，所以可以使用 &lt;code&gt;Git&lt;/code&gt; 子模块相关命令进行安装。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git submodule —-查看当前项目用到的子模块
&lt;span class="nv"&gt;$ &lt;/span&gt;git submodule init —-只在首次检出仓库时运行一次就行
&lt;span class="nv"&gt;$ &lt;/span&gt;git submodule update —-更新子模块（子模块会重新检出）
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;更简单的一种方法是克隆主仓库时将其所包含的子模块同时克隆下来。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt; $ git clone --recursive git@github.com:allotory/doricha.git vimfiles
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;最后不要忘了将我们自定义的配置文件引入到 Vim 的配置文件 &lt;code&gt;_vimrc&lt;/code&gt; 中，因为此时的 &lt;code&gt;_vimrc&lt;/code&gt; 文件是全新的，需要重新设置。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;总结&lt;/h3&gt;
&lt;p&gt;Vim 是一个神器，但用好不宜。个人觉得不应该安装过多的插件使其成为一个 IDE ，过多的插件会使 Vim 卡顿、启动缓慢等。反而不如真正的 IDE 好用。最后附上我的界面。&lt;/p&gt;
&lt;p&gt;&lt;img alt="screenshot" src="/images/10-vim-vundle-config.png" /&gt;&lt;/p&gt;</summary><category term="Vim"></category><category term="GitHub"></category></entry><entry><title>设置IDE移动光标快捷键</title><link href="http://allotory.github.io/posts/2015/01/06/ide-key-setting/" rel="alternate"></link><updated>2015-01-06T00:00:00+08:00</updated><author><name>Ellery</name></author><id>tag:allotory.github.io,2015-01-06:posts/2015/01/06/ide-key-setting/</id><summary type="html">&lt;h3&gt;Eclipse&lt;/h3&gt;
&lt;p&gt;在Eclipse的一堆快捷键设置中&lt;code&gt;Window -&amp;gt; Preferences -&amp;gt; General -&amp;gt; Keys&lt;/code&gt; 分别找出上下左右命令名称设置为：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    Previous Column -&amp;gt; Alt + H      
    Line Up         -&amp;gt; Alt + J
    Line Down       -&amp;gt; Alt + K
    Next Column     -&amp;gt; Alt + L
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Sublime Text&lt;/h3&gt;
&lt;p&gt;在Sublime Text里，打开&lt;code&gt;Preferences -&amp;gt; Key Bindings -&amp;gt; User&lt;/code&gt;设置移动快捷键：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    { &amp;quot;keys&amp;quot;: [&amp;quot;Alt + L&amp;quot;], &amp;quot;command&amp;quot;: &amp;quot;move&amp;quot;, 
        &amp;quot;args&amp;quot;: {&amp;quot;by&amp;quot;: &amp;quot;characters&amp;quot;, &amp;quot;forward&amp;quot;: true} },
    { &amp;quot;keys&amp;quot;: [&amp;quot;Alt + H&amp;quot;], &amp;quot;command&amp;quot;: &amp;quot;move&amp;quot;, 
        &amp;quot;args&amp;quot;: {&amp;quot;by&amp;quot;: &amp;quot;characters&amp;quot;, &amp;quot;forward&amp;quot;: false} },
    { &amp;quot;keys&amp;quot;: [&amp;quot;Alt + Space&amp;quot;], &amp;quot;command&amp;quot;: &amp;quot;move&amp;quot;, 
        &amp;quot;args&amp;quot;: {&amp;quot;by&amp;quot;: &amp;quot;word_ends&amp;quot;, &amp;quot;forward&amp;quot;: true} },
    { &amp;quot;keys&amp;quot;: [&amp;quot;Shift + Alt + Space&amp;quot;], &amp;quot;command&amp;quot;: &amp;quot;move&amp;quot;, 
        &amp;quot;args&amp;quot;: {&amp;quot;by&amp;quot;: &amp;quot;word_ends&amp;quot;, &amp;quot;forward&amp;quot;: false} },
    { &amp;quot;keys&amp;quot;: [&amp;quot;Alt + K&amp;quot;], &amp;quot;command&amp;quot;: &amp;quot;move&amp;quot;, 
        &amp;quot;args&amp;quot;: {&amp;quot;by&amp;quot;: &amp;quot;lines&amp;quot;, &amp;quot;forward&amp;quot;: true} },
    { &amp;quot;keys&amp;quot;: [&amp;quot;Alt + J&amp;quot;], &amp;quot;command&amp;quot;: &amp;quot;move&amp;quot;, 
        &amp;quot;args&amp;quot;: {&amp;quot;by&amp;quot;: &amp;quot;lines&amp;quot;, &amp;quot;forward&amp;quot;: false} }
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;快捷键对照：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    Alt + L                 右移光标一个字符
    Alt + H                 左移光标一个字符
    Alt + Space             右移光标一个单元
    Shift + Alt + Space     左移光标一个单元
    Alt + K                 下移光标一行
    Alt + J                 上移光标一行
&lt;/pre&gt;&lt;/div&gt;</summary><category term="IDE"></category></entry></feed>