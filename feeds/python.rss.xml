<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Heliactin</title><link>/</link><description></description><atom:link href="/feeds/python.rss.xml" rel="self"></atom:link><lastBuildDate>Wed, 07 Jan 2015 00:00:00 +0800</lastBuildDate><item><title>Python time,datetime,string转换</title><link>/posts/2015/01/07/pelican-time-string/</link><description>&lt;h5&gt;把datetime转换为字符串&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    def datetime_toString(dt):  
        return dt.strftime(&amp;quot;%Y-%m-%d-%H&amp;quot;)
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;把字符串转换为datetime&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    def string_toDatetime(string):  
         return datetime.strptime(string, &amp;quot;%Y-%m-%d-%H&amp;quot;)
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;把字符串转会为时间戳&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    def string_toTimestamp(strTime):  
        return time.mktime(string_toDatetime(strTime).timetuple())
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;把时间戳转换为字符串&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    def timestamp_toString(stamp):  
        return time.strftime(&amp;quot;%Y-%m-%d-%H&amp;quot;, tiem.localtime(stamp))
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;把datetime类型转换为时间戳&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    def datetime_toTimestamp(dateTim):  
        return time.mktime(dateTim.timetuple())
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ellery</dc:creator><pubDate>Wed, 07 Jan 2015 00:00:00 +0800</pubDate><guid>tag:,2015-01-07:posts/2015/01/07/pelican-time-string/</guid><category>Python</category></item><item><title>Django 1.7 使用migrations建立数据库连接</title><link>/posts/2014/09/28/django-migrations/</link><description>&lt;p&gt;Django1.7 采用了全新的APP加载框架，校验框架，数据查询优化，并且还自带整合了&lt;code&gt;django-south&lt;/code&gt;的（数据库）迁移功能，其提供的&lt;code&gt;django-admin migrate&lt;/code&gt;也将代替&lt;code&gt;syncdb&lt;/code&gt;命令.&lt;/p&gt;
&lt;p&gt;因此在我们建立数据库模型之后，就不能使用django的&lt;code&gt;syncdb&lt;/code&gt;命令同步数据库了&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;python manage.py syncdb
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;否则数据库模型将不会同步到真正的数据库中。

在Django 1.7中使用将使用全新的&lt;code&gt;migrations&lt;/code&gt;同步数据库。建立数据库模型后使用命令&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;python manage.py makemigrations west
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;创建migrations，成功显示如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Migrations for &amp;#39;west&amp;#39;:
    0001_initial.py:
    - Create model Character
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;使用&lt;code&gt;sqlmigrate&lt;/code&gt;命令查看sql语句&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;python manage.py sqlmigrate west 0001
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;最后使用&lt;code&gt;migrate&lt;/code&gt;命令同步数据库&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;python manage.py migrate
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;此时数据库模型已经真正的同步到数据库中了。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ellery</dc:creator><pubDate>Sun, 28 Sep 2014 00:00:00 +0800</pubDate><guid>tag:,2014-09-28:posts/2014/09/28/django-migrations/</guid><category>Django</category><category>Python</category></item><item><title>解决Django同步数据库No module named MySQLdb错误</title><link>/posts/2014/09/24/django-syncdb/</link><description>&lt;p&gt;Django在同步数据库时会根据&lt;code&gt;models.py&lt;/code&gt;中描述的数据模型，在MySQL中创建各个关系表&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;python manage.py syncdb
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;同步数据库后，Django将建立相关的MySQL表格，并要求你创建一个超级用户等信息，但有时在windows环境下执行上述命令后会提示出错信息：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;django.core.exceptions.ImproperlyConfigured: 
Error loading MySQLdb module: No module named MySQLdb
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;No model named Mysqldb，这是因为当前Python环境没有安装&lt;code&gt;MySQL for Python&lt;/code&gt;组件，解决办法：下载相应&lt;a href="http://sourceforge.net/projects/mysql-python/files/mysql-python-test/"&gt;MySQL for Python组件&lt;/a&gt;并安装即可。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ellery</dc:creator><pubDate>Wed, 24 Sep 2014 00:00:00 +0800</pubDate><guid>tag:,2014-09-24:posts/2014/09/24/django-syncdb/</guid><category>Django</category><category>MySQL</category></item><item><title>修复Pelican代码块中红框问题</title><link>/posts/2014/09/08/fix-code-err/</link><description>&lt;p&gt;在使用Markdown的代码块时，如果代码中有汉字或者按规定书写错误的代码，则生成的HTML文件中错误的代码会有红框框住。
在Pelican中使用&lt;code&gt;pygment.css&lt;/code&gt;文件处理代码高亮，我们可以修改该文件修复红框问题。可以修改&lt;code&gt;output/theme/pygment.css&lt;/code&gt;处理该问题，但是当我们重新调用&lt;code&gt;make html&lt;/code&gt;时，文件会被重置，所以可以修改博客根目录下&lt;code&gt;pelican-themes&lt;/code&gt;里的&lt;code&gt;pygment.css&lt;/code&gt;文件。如本博客为&lt;code&gt;Amazilia\pelican-themes\gum\static&lt;/code&gt;下的&lt;code&gt;pygment.css&lt;/code&gt;。找到如下代码去掉即可。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="na"&gt;.err&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;border:&lt;/span&gt;&lt;span class="err"&gt;1&lt;/span&gt;&lt;span class="nf"&gt;px&lt;/span&gt; &lt;span class="no"&gt;solid&lt;/span&gt; &lt;span class="c"&gt;#FF0000;&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ellery</dc:creator><pubDate>Mon, 08 Sep 2014 00:00:00 +0800</pubDate><guid>tag:,2014-09-08:posts/2014/09/08/fix-code-err/</guid><category>CSS</category><category>Pelican</category><category>Markdown</category></item><item><title>使用Pelican和GitHub搭建个人博客</title><link>/posts/2014/09/08/pelican-install/</link><description>&lt;h3&gt;简介&lt;/h3&gt;
&lt;p&gt;Github是一个具有版本管理功能的代码仓库，每个项目都有一个主页，列出项目的源文件。GitHub设计了Pages功能，允许用户自定义项目首页，用来替代默认的源码列表。所以，github Pages可以被认为是用户编写的、托管在github上的静态网页。&lt;/p&gt;
&lt;h3&gt;基础知识&lt;/h3&gt;
&lt;p&gt;搭建博客使用的工具是基于Python的Pelican。相对于WordPress，Pelican有着轻便小巧的特性，与GitHub Pages搭配很完美。当然其他的工具如Jeklly也非常棒，基于octopress相当的不错，可惜都是基于ruby语言的，对ruby语言压根就不了解，并且最近一直在学习Python，所以最终选择了基于Python的Pelican。
&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://gihub.com/"&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pages.github.com/"&gt;GitHub Pages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://git-scm.com/"&gt;Git&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.python.org/"&gt;Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.python.org/pypi"&gt;Pip&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://daringfireball.net/projects/markdown/syntax"&gt;Pelican&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h3&gt;下载安装&lt;/h3&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.python.org/getit/"&gt;Python下载&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://msysgit.github.io/"&gt;Git下载&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.python.org/pypi/distribute#downloads"&gt;Pip下载&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.equation.com/servlet/equation.cmd?fa=make"&gt;Windows下make下载&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;安装Python，本文使用的是Python 2.7&lt;/li&gt;
&lt;li&gt;安装Git，Git简单教程参见&lt;a href="http://www.git-scm.com/book/zh"&gt;Git教程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;将Python安装文件夹中的scripts和make.exe加入环境变量&lt;/li&gt;
&lt;li&gt;安装pip，具体可以看&lt;a href="http://www.pip-installer.org/en/latest/installing.html"&gt;官网介绍&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;安装pelican和markdown，具体请参见&lt;a href="http://daringfireball.net/projects/markdown/syntax"&gt;markdown教程&lt;/a&gt;。&lt;div class="highlight"&gt;&lt;pre&gt;pip install pelican
pip install markdown
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;开始搭建博客&lt;/h3&gt;
&lt;p&gt;打开Git bash，创建一个文件夹&lt;code&gt;Amazilia&lt;/code&gt;（可以按喜好拟定），执行如下命令：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;mkdir Amazilia
cd Amazilia
pelican-quickstart
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;执行完pelican-quickstart命令后，会提示博客的配置选项，除少数几项必填之外，其他可以选择默认，如有需要可以在&lt;code&gt;pelicanconf.py&lt;/code&gt;文件中可以进行修改。
命令成功执行后，会出现Pelican框架，如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Amazilia/
├── content                # 存放输入的markdown源文件
│   └── (pages)            # 存放手工创建的静态页面，可选
├── output                 # 存放最终生成的静态博客
├── develop_server.sh      # 测试服务器
├── Makefile               # 管理博客的Makefile
├── pelicanconf.py         # 配置文件
└── publishconf.py         # 发布文件，可删除
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;撰写博客&lt;/h3&gt;
&lt;p&gt;完成博客主体搭建后，可以使用Sublime Text创建一个&lt;code&gt;.md&lt;/code&gt;文件，使用markdown语法书写博客，完成后保存于&lt;code&gt;content&lt;/code&gt;文件夹中。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Title: 使用Pelican和GitHub搭建个人博客
Date: 2014-09-08
Tags: Python, Pelican, GitHub, Markdown
Category: Pelican
Slug: pelican-install
Author: Ellery
###简介
Github是一个具有版本管理功能的代码仓库，每个项目都有一个主页，列出项目的源文件。GitHub设计了Pages功能，允许用户自定义项目首页，用来替代默认的源码列表。所以，github Pages可以被认为是用户编写的、托管在github上的静态网页。
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;完成之后，在&lt;code&gt;Amazilia&lt;/code&gt;目录下，执行&lt;code&gt;make html&lt;/code&gt;命令生成博客&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;make html
(pelican e:/blog/content/ -o e:/blog/output -s e:/blog/pelicanconfg.py)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;make html&lt;/code&gt;命令是将&lt;code&gt;.md&lt;/code&gt;文件生成HTML，存放在&lt;code&gt;output&lt;/code&gt;目录下，如果没有&lt;code&gt;make&lt;/code&gt;命令，可以使用第二行的&lt;code&gt;Pelican&lt;/code&gt;命令。
接着执行&lt;code&gt;make serve&lt;/code&gt;命令开启测试服务器&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;make serve
(cd e:/blog/output/ &amp;amp;&amp;amp; python -m pelican.server)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;同样&lt;code&gt;make serve&lt;/code&gt;命令也可以由第二行的&lt;code&gt;Pelican&lt;/code&gt;命令替代，在浏览器中输入&lt;code&gt;http://localhost:8000&lt;/code&gt;即可看到博文效果。&lt;/p&gt;
&lt;h3&gt;配置主题&lt;/h3&gt;
&lt;p&gt;在Amazilia目录下，按照如下步骤下载Pelican主题，只挑选喜欢的即可，其他不喜欢的可以删掉。主题可以在&lt;a href="https://github.com/getpelican/pelican-themes"&gt;Pelican主题库&lt;/a&gt;查看。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git clone https://github.com/getpelican/pelican-themes.git
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;打开配置文件&lt;code&gt;pelicanconf.py&lt;/code&gt;，更改或添加&lt;code&gt;THEME&lt;/code&gt;为自己喜欢的主题。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;THEME = &amp;#39;pelican-themes/gum&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;添加评论系统&lt;/h3&gt;
&lt;p&gt;在&lt;a href="https://disqus.com/"&gt;Disqus&lt;/a&gt;上注册，按照流程Disqus会分配给站点一个&lt;code&gt;Shortname&lt;/code&gt;，然后修改&lt;code&gt;pelicanconf.py&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;DISQUS_SITENAME=Shortname
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;发布博客&lt;/h3&gt;
&lt;p&gt;在github上面建立一个&lt;code&gt;当前github用户名.github.io&lt;/code&gt;的版本仓库，如我博客版本仓库的为&lt;code&gt;allotory.github.io&lt;/code&gt;，然后进入&lt;code&gt;output&lt;/code&gt;目录下，依次执行如下命令：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git init
git remote add origin git@github.com:allotory/allotory.github.io.git
git pull origin master
git commit -m &amp;#39;first blog&amp;#39;
git push origin master
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如此完成博客发布，访问&lt;code&gt;allotory.github.io&lt;/code&gt;即可。&lt;/p&gt;
&lt;h3&gt;Google Analytics&lt;/h3&gt;
&lt;p&gt;注册&lt;a href="https://disqus.com/"&gt;Google Analytics&lt;/a&gt;可以更好的管理自己的站点，按顺序注册，得到&lt;code&gt;Tracking ID&lt;/code&gt;配置到&lt;code&gt;pelicanconf.py&lt;/code&gt;里面。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;GOOGLE_ANALYTICS = &amp;#39;Tracking ID&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Google Webmasters&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://www.google.com/webmasters"&gt;Google Webmasters&lt;/a&gt;是Google的站长工具，使用它的目的是让博客被Google更好的收录，比如手动让Googlebot抓取、提交Robots、更新Sitemap等功能，使用起来非常方便。要想使用Google Webmasters只要在&lt;a href="http://www.google.com/webmasters"&gt;Google Webmasters&lt;/a&gt;上注册即可。&lt;/p&gt;
&lt;h3&gt;URL配置&lt;/h3&gt;
&lt;p&gt;使用URL配置可以更好的设置博文的URL。打开&lt;code&gt;pelicanconf.py&lt;/code&gt;，按照如下修改或添加：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;ARTICLE_URL = &amp;#39;posts/{date:%Y}/{date:%m}/{date:%d}/{slug}/&amp;#39;
ARTICLE_SAVE_AS = &amp;#39;posts/{date:%Y}/{date:%m}/{date:%d}/{slug}/index.html&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;此时的URL为&lt;code&gt;http://allotory.github.io/posts/2014/09/08/pelican-install/&lt;/code&gt;,而文件保存路径为&lt;code&gt;http://allotory.github.io/posts/2014/09/08/pelican-install/index.html&lt;/code&gt;。&lt;/p&gt;
&lt;h3&gt;总结&lt;/h3&gt;
&lt;p&gt;到目前为止博客基本功能已经搭建完成，部分功能还可以进一步完善，最终效果如下：&lt;/p&gt;
&lt;p&gt;&lt;img alt="screenshot" src="/images/screenshot.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ellery</dc:creator><pubDate>Mon, 08 Sep 2014 00:00:00 +0800</pubDate><guid>tag:,2014-09-08:posts/2014/09/08/pelican-install/</guid><category>Python</category><category>Pelican</category><category>GitHub</category><category>Markdown</category></item></channel></rss>